<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Normal</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>Lifestyles</value>
    </field>
    <field name="Fix versions">
      <value>4.0</value>
    </field>
    <field name="Affected versions">
      <value>3.0</value>
      <value>3.1</value>
      <value>3.2</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>349</value>
    </field>
    <field name="summary">
      <value>SerializationException — Type is not resolved for member "Castle.MicroKernel.Lifestyle.Scoped.CallContextLifetimeScope+SerializationReference,Castle.Windsor, Version=3.1.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc"</value>
    </field>
    <field name="description">
      <value>Before the upgrade (3.0.0.0 -&gt; 3.1.0.0) was a bug IOC-338.</value>
    </field>
    <field name="created">
      <value>1344353242478</value>
    </field>
    <field name="updated">
      <value>1373030732253</value>
    </field>
    <field name="reporterName">
      <value>inviz</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1360907545288</value>
    </field>
    <field name="voterName">
      <value>sarkar</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-18[up-to-date]</value>
      <value>User: id = 20-892[up-to-date]</value>
      <value>User: id = 20-895[up-to-date]</value>
      <value>User: id = 20-943[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="xtoff" text="Can you elaborate?" created="1344370300885" />
    <comment author="rubenvh" text="Hello, maybe I can elaborate a bit. In a project i've encountered bug 338 using version 3.0. Upgrading to castle 3.1 resulted in this new SerializationException. I've tried to isolate this situation in an easy to reproduce example.&#xA;&#xA;{code:lang=csharp|title=The following test passes and documents the bug. The interface IA and class A can be anything.}&#xA;        [TestMethod, ExpectedException(typeof(SerializationException))]&#xA;        public void ReadingConfig_FailsInLifestyleScope_WhenUsingMsTest()&#xA;        {&#xA;            var container = new WindsorContainer();&#xA;            container.Register(Component.For&lt;IA&gt;().ImplementedBy&lt;A&gt;().LifestyleScoped());&#xA;&#xA;            using (container.BeginScope())&#xA;            {&#xA;                var a = container.Resolve&lt;IA&gt;();&#xA;&#xA;                try&#xA;                {&#xA;                    var configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);&#xA;                }&#xA;                catch (ConfigurationErrorsException e)&#xA;                {&#xA;                    //  http://issues.castleproject.org/issue/IOC-338 (fixed in 3.1)&#xA;                    //  http://issues.castleproject.org/issue/IOC-349 (not yet fixed in 3.1)&#xA;&#xA;                    Console.WriteLine(&quot;This is the MsTest / Castle bug&quot;);&#xA;                    Assert.IsNotNull(e.InnerException);&#xA;                    Assert.IsInstanceOfType(e.InnerException, typeof (SerializationException));&#xA;                    throw e.InnerException;&#xA;                }&#xA;            }&#xA;        }&#xA;{code}&#xA;&#xA;Note that this exception only occurs when running the test with MsTest. Our resharper test runner does not have the problem.&#xA;&#xA;Hope this helps,&#xA;&#xA;Kind Regards,&#xA;Ruben." created="1345190436269" />
    <comment author="xtoff" text="The bug/problem seems to be in the way MSTest sets up the appdomain where it runs the test, explicitly creating the list of trusted assemblies. I don't know MsTest too well, but there might be a way to add Windsor to the list.&#xA;&#xA;If not - just drop MsTest, switch to NUnit or xUnit instead&#xA;" created="1345363361887" />
    <comment author="xtoff" text="Can I close it now or do you have anything to add?" created="1349646080129" />
    <comment author="rubenvh" text="I have nothing to add. I'm not sure if the creator of this bug has anything to add? &#xA;We are migrating our tests to xUnit.&#xA;" created="1350633641680" />
    <comment author="sarkar" text="I am facing this same issue with MS Test. Re-sharper resolves everything properly.&#xA;Below is the exception and stack trace. &#xA;&#xA;{code:lang=scala|title=Exception}System.TypeInitializationException was unhandled by user code&#xA;  HResult=-2146233036&#xA;  Message=The type initializer for 'NHibernate.Cfg.Environment' threw an exception.&#xA;  Source=NHibernate&#xA;  TypeName=NHibernate.Cfg.Environment&#xA;  StackTrace:&#xA;       at NHibernate.Cfg.Environment.get_Properties()&#xA;       at NHibernate.Cfg.Configuration.Reset()&#xA;       at NHibernate.Cfg.Configuration..ctor(SettingsFactory settingsFactory)&#xA;       at NHibernate.Cfg.Configuration..ctor()&#xA;       at MyProject.Components.Repository.Nhibernate.SessionFactoryBuilder.BuildSessionFactory()&#xA;       at System.Lazy`1.CreateValue()&#xA;       at System.Lazy`1.LazyInitValue()&#xA;       at System.Lazy`1.get_Value()&#xA;       at MyProject.Components.Repository.Nhibernate.SessionFactoryBuilder.GetCurrentSessionFactory(IEventBroker eventBroker, IContextInfoAccessor contextAccessor, Uri mappingXmlFilesLocation)&#xA;       at MyProject.Components.Repository.Nhibernate.Installers.NhibernateInstaller.&lt;&gt;c__DisplayClass1.&lt;Install&gt;b__0()&#xA;       at Castle.MicroKernel.Registration.ComponentRegistration`1.&lt;&gt;c__DisplayClass1f`1.&lt;UsingFactoryMethod&gt;b__1e(IKernel k, ComponentModel m, CreationContext c)&#xA;       at Castle.MicroKernel.ComponentActivator.FactoryMethodActivator`1.Instantiate(CreationContext context)&#xA;       at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.InternalCreate(CreationContext context)&#xA;       at Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Create(CreationContext context, Burden burden)&#xA;       at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)&#xA;       at Castle.MicroKernel.Lifestyle.SingletonLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)&#xA;       at Castle.MicroKernel.Handlers.DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden&amp; burden)&#xA;       at Castle.MicroKernel.Handlers.DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)&#xA;       at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)&#xA;       at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernelByType(CreationContext context, ComponentModel model, DependencyModel dependency)&#xA;       at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)&#xA;       at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveCore(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)&#xA;       at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)&#xA;       at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)&#xA;       at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.Instantiate(CreationContext context)&#xA;       at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.InternalCreate(CreationContext context)&#xA;       at Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Create(CreationContext context, Burden burden)&#xA;       at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)&#xA;       at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)&#xA;       at Castle.MicroKernel.Handlers.DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden&amp; burden)&#xA;       at Castle.MicroKernel.Handlers.DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)&#xA;       at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)&#xA;       at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernelByType(CreationContext context, ComponentModel model, DependencyModel dependency)&#xA;       at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)&#xA;       at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveCore(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)&#xA;       at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)&#xA;       at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)&#xA;       at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.Instantiate(CreationContext context)&#xA;       at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.InternalCreate(CreationContext context)&#xA;       at Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Create(CreationContext context, Burden burden)&#xA;       at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)&#xA;       at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)&#xA;       at Castle.MicroKernel.Handlers.DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden&amp; burden)&#xA;       at Castle.MicroKernel.Handlers.DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)&#xA;       at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)&#xA;       at Castle.MicroKernel.DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments, IReleasePolicy policy)&#xA;       at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)&#xA;       at Castle.MicroKernel.DefaultKernel.Resolve(Type service, IDictionary arguments)&#xA;       at Castle.Windsor.WindsorContainer.Resolve[T]()&#xA;       at MyProject.Qa.TestFramework.IntegrationTest.Resolve[T]() in c:\Workspaces\MyProject-QA\Development\MyProject.Qa.TestFramework\MyProject.Qa.TestFramework\IntegrationTest.cs:line 114&#xA;       at MyProject.ModuleA.IntegrationTest.Service.MySection.MySectionServiceTest.&lt;CatlogService_Is_Resolvable&gt;b__0() in c:\Workspaces\MyProject-ModuleA\Development\MyProject.ModuleA.IntegrationTest\Service\MySection\MySectionServiceTest.cs:line 24&#xA;       at MyProject.Qa.TestFramework.IntegrationTest.Transact(Action action) in c:\Workspaces\MyProject-QA\Development\MyProject.Qa.TestFramework\MyProject.Qa.TestFramework\IntegrationTest.cs:line 137&#xA;       at MyProject.ModuleA.IntegrationTest.Service.MySection.MySectionServiceTest.MySectionService_Is_Resolvable() in c:\Workspaces\MyProject-ModuleA\Development\MyProject.ModuleA.IntegrationTest\Service\MySection\MySectionServiceTest.cs:line 22&#xA;  InnerException: System.Runtime.Serialization.SerializationException&#xA;       HResult=-2146233076&#xA;       Message=Type is not resolved for member 'Castle.MicroKernel.Lifestyle.Scoped.CallContextLifetimeScope+SerializationReference,Castle.Windsor, Version=3.1.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc'.&#xA;       Source=mscorlib&#xA;       StackTrace:&#xA;            at System.AppDomain.get_Evidence()&#xA;            at System.AppDomain.get_EvidenceNoDemand()&#xA;            at System.AppDomain.get_Evidence()&#xA;            at System.Configuration.ClientConfigPaths.GetEvidenceInfo(AppDomain appDomain, String exePath, String&amp; typeName)&#xA;            at System.Configuration.ClientConfigPaths.GetTypeAndHashSuffix(AppDomain appDomain, String exePath)&#xA;            at System.Configuration.ClientConfigPaths..ctor(String exePath, Boolean includeUserConfig)&#xA;            at System.Configuration.ClientConfigPaths.GetPaths(String exePath, Boolean includeUserConfig)&#xA;            at System.Configuration.ClientConfigurationHost.RequireCompleteInit(IInternalConfigRecord record)&#xA;            at System.Configuration.BaseConfigurationRecord.GetSectionRecursive(String configKey, Boolean getLkg, Boolean checkPermission, Boolean getRuntimeObject, Boolean requestIsHere, Object&amp; result, Object&amp; resultRuntimeObject)&#xA;            at System.Configuration.BaseConfigurationRecord.GetSection(String configKey)&#xA;            at System.Configuration.ClientConfigurationSystem.System.Configuration.Internal.IInternalConfigSystem.GetSection(String sectionName)&#xA;            at System.Configuration.ConfigurationManager.GetSection(String sectionName)&#xA;            at NHibernate.Cfg.Environment.LoadGlobalPropertiesFromAppConfig()&#xA;            at NHibernate.Cfg.Environment..cctor()&#xA;       InnerException:&#xA;{code}&#xA;&#xA;I tried to clean workspace and get the project from tfs, but still the same issue is coming again and again. Strangely, this works fine on all other system. I have checked on 3 other machines and they have reported no issue. This issue is coming on my machine only. More strangely this issue comes with one particular project only while the other projects implementing the same thing works fine. I suspect the real issue is something else than what is thrown. Any help would be appreciated." created="1366106747876" />
    <comment author="sarkar" text="Installing Castle.Windsor.dll to GAC solved this issue." created="1370520803427" />
  </issue>
</issues>