<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions" />
    <field name="Affected versions">
      <value>RC 4</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>61</value>
    </field>
    <field name="summary">
      <value>Resolving a generic component by id and type fails</value>
    </field>
    <field name="description">
      <value>Resolving a generic component by id and type fails with an exception. Using ComplexGenericConfig.xml configuration from the Tests project and calling:
    IRepository&lt;IReviewer&gt; repository = container.Resolve&lt;IRepository&lt;IReviewer&gt;&gt;("generic.repository");
results in:
    System.InvalidOperationException : Castle.Windsor.Tests.DemoRepository`1[T] is not a GenericTypeDefinition. MakeGenericType may only be called on a type for which Type.IsGenericTypeDefinition is true.

This is because in WindsorContainer.cs
    public virtual object Resolve(String key, Type service)
calls
    return kernel[key];
and ignores the service parameter.

I have attached a patch for this including a test.
</value>
    </field>
    <field name="created">
      <value>1168868398000</value>
    </field>
    <field name="updated">
      <value>1283220859869</value>
    </field>
    <field name="reporterName">
      <value>daveg</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1282141996495</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-18[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
  </issue>
</issues>