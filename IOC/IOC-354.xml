<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Normal</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>Lifestyles</value>
    </field>
    <field name="Fix versions">
      <value>3.2</value>
    </field>
    <field name="Affected versions" />
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>354</value>
    </field>
    <field name="summary">
      <value>Deadlock in pooled lifestyle under heavy load</value>
    </field>
    <field name="description">
      <value>Thread 1:

TypedFactoryComponentResolver.Resolve() causes (through some intermediaries) a call to DefaultPool.Request which locks DefaultPool.rwlock for writing then eventually proceeds to LifecycledComponentsReleasePolicy.Track() which tries to obtain its lock for writing.

Thread 2:

TypedFactoryComponentResolver.Release() goes through LifecycledComponentsReleasePolicy.Release() first which obtains its lock for writing and then proceeds to Burden.Release() while still holding the lock which eventually makes its way to DefaultPool.Release() which tries to obtain DefaultPool.rwlock for writing.

Since the order of obtaining locks is exactly opposite, a deadlock happens under heavy load.


// taken from github: https://github.com/castleproject/Windsor/issues/8</value>
    </field>
    <field name="created">
      <value>1346361487861</value>
    </field>
    <field name="updated">
      <value>1407822257267</value>
    </field>
    <field name="reporterName">
      <value>xtoff</value>
    </field>
    <field name="updaterName">
      <value>jonorossi</value>
    </field>
    <field name="resolved">
      <value>1346362745928</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
  </issue>
</issues>