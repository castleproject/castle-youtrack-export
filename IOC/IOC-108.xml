<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions" />
    <field name="Affected versions">
      <value>RC 3</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>108</value>
    </field>
    <field name="summary">
      <value>Dependency Injection Fails When Constructor Parameter and Public Property with Private / Protected set Have Same Name</value>
    </field>
    <field name="description">
      <value>I get a NullReferenceException when I have a component that has a constructor parameter and property of the same name, when the property has a limited accessor. I guess MK is trying to inject the dependency twice? Quick workaround is to make the property not public ;)

Stack trace:
   at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context)
   at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.InternalCreate(CreationContext context)
   at Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Create(CreationContext context)
   at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.Resolve(CreationContext context)
   at Castle.MicroKernel.Lifestyle.SingletonLifestyleManager.Resolve(CreationContext context)
   at Castle.MicroKernel.Handlers.DefaultHandler.Resolve(CreationContext context)
   at Castle.MicroKernel.DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments)
   at Castle.MicroKernel.DefaultKernel.ResolveComponent(IHandler handler, Type service)
   at Castle.MicroKernel.DefaultKernel.get_Item(Type service)
   at Castle.MicroKernel.DefaultKernel.Resolve(Type service)
   at Castle.MicroKernel.DefaultKernel.Resolve[T]()
</value>
    </field>
    <field name="created">
      <value>1196965599000</value>
    </field>
    <field name="updated">
      <value>1283220838901</value>
    </field>
    <field name="reporterName">
      <value>captainramen</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1228854240000</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-18[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="alwin" text="Could this issue be closed?&#xA;&#xA;First of all, it looks alot like issue IoC-117 (which is already closed)&#xA;&#xA;Second, I created a test case for it (see attached patch), and the test passes.&#xA;&#xA;And thirdly, PropertiesDependenciesModelInspector.InspectProperties() already checks if the property has a public setter available.&#xA;&#xA;if (!property.CanWrite || property.GetSetMethod() == null)&#xA;{&#xA;	continue;&#xA;}&#xA;" created="1227650548000" />
    <comment author="ayenderahien" text="applied passing test" created="1228854272000" />
    <comment author="ayenderahien" text="* '''Resolution''' set to ''Fixed''.&#xD;&#xA;* '''Status''' changed from ''Open'' to ''Resolved''.&#xD;&#xA;" created="1228854240000" />
  </issue>
</issues>