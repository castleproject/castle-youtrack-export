<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Normal</value>
    </field>
    <field name="Type">
      <value>Feature</value>
    </field>
    <field name="State">
      <value>Won't fix</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions" />
    <field name="Affected versions" />
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>368</value>
    </field>
    <field name="summary">
      <value>Convention-based hierarchy for lifetimes</value>
    </field>
    <field name="description">
      <value>It'd be nice to be able to define a 'hierarchy' for lifetimes. For example, in a web site, define a prioritized list of preferred lifetimes:

1. Singleton
2. PerWebRequest
3. Transient

Where 1 has a higher priority than 2, etc.

What the container should do then was to assign the highest prioritized lifestyle, taking into account what the subgraph looks like.

If, for example, a leaf node is defined as PerWebRequest, alle nodes above that would also need to be defined as PerWebRequest.

However, if a component has only Singleton dependencies, it can be configured as Singleton itself.</value>
    </field>
    <field name="created">
      <value>1352806237003</value>
    </field>
    <field name="updated">
      <value>1396695101902</value>
    </field>
    <field name="reporterName">
      <value>Mark.Seemann</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1396695101888</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-18[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="xtoff" text="Where would you use this feature?&#xA;&#xA;The problem with implementing it is that at the time of picking the lifestyle you'd have to guarantee that all its subdependencies have been registered and have had their lifestyle selected." created="1353991652531" />
    <comment author="Mark.Seemann" text="I'd use this feature in every application where I today use Convention over Configuration - that effectively means everywhere.&#xA;&#xA;I'm not saying it'd be easy to implement - I have no opinion about that :)" created="1354001807307" />
    <comment author="xtoff" text="So you'd be comfortable leaving such a fundamental aspect of component's configuration as lifestyle to a convention? At a certain level this scares me a bit." created="1354002158775" />
    <comment author="Mark.Seemann" text="Why? It's not like it's complicated in practice. Every thread-safe dependency should be a singleton. Everything else PerWebRequest (if a web app) or Transient.&#xA;&#xA;Obviously, one can always dream up exceptions to a rule like that, but it would fit for 95 % (or more) of most components." created="1354002540180" />
    <comment author="xtoff" text="The problem I have with that, is that it takes a simple rule of &quot;it's a singleton unless you tell me otherwise&quot; and turns it into &quot;it can be anything unless you tell me otherwise&quot;.&#xA;&#xA;While I find the idea interesting in theory, in practice I think it might bring more harm than good to most users, as it's inviting for subtle bugs to occur. Not really pushing you into the pit of success.&#xA;&#xA;And all of that to save a bit of registration code?" created="1354003362848" />
    <comment author="Mark.Seemann" text="It's not to save a bit of registration code - it's to save a lot of registration code.&#xA;&#xA;Basically, I find that a container brings ultimate value if it can be pushed towards pure Convention over Configuration. If not, then the {{new}} keyword starts to look awfully attractive: http://blog.ploeh.dk/2012/11/06/WhenToUseADIContainer.aspx" created="1354003781397" />
    <comment author="xtoff" text="Do you feel adding {{LifestyleTransient()}} is a big hassle?&#xA;&#xA;Or did you have something else in mind saying it would save a lot of registration code?" created="1354004242455" />
    <comment author="Mark.Seemann" text="What I currently do is to just register everything as Transient, so it's not a hassle. It's just not efficient if a large percentage of those dependencies could have been Singletons." created="1354004494989" />
    <comment author="xtoff" text="I'm happy to experiment with it, although I'm not sure I will have the time to implement it myself. Having this as a facility would be a good start." created="1354050953087" />
    <comment author="Mark.Seemann" text="Sounds good - I would have been happy to do this as a pull request, but I don't feel that I have a sufficient grasp of the Windsor internals to pull this off in an appropriate manner. For one, I've never been able to make the Windsor code compile..." created="1354088985424" />
    <comment author="xtoff" text="ah ok. How come you can't compile it? What's the issue?" created="1354093342106" />
    <comment author="Mark.Seemann" text="Well, I now managed to get Castle.Core to compile. The issue was that the default build configuration is a mono config that doesn't compile on my system - however, the .NET 4 Debug configuration does.&#xA;&#xA;The Windsor solution doesn't compile due to lack of referenced assemblies (Castle.Core etc.) What's the recommended way to work with these? Copy from a Castle.Core build?" created="1354138360087" />
    <comment author="xtoff" text="Windsor does have all the references to Core. IT should be as simple as select the configuration (net40) and build. Does it work if you run build.cmd?" created="1354139266106" />
    <comment author="Mark.Seemann" text="Ah, NET40-Debug is different from Debug. Confusing, but now it compiles...&#xA;&#xA;It has 121 failing unit tests, though..." created="1354139648806" />
    <comment author="xtoff" text="what tests?" created="1354141405291" />
    <comment author="Mark.Seemann" text="Well, since you asked :)&#xA;&#xA;------ Test started: Assembly: Castle.Windsor.Tests.dll ------&#xA;&#xA;Test 'CastleTests.LazyComponentsTestCase.Can_resolve_lazy_component_requiring_arguments_inline' failed: Castle.MicroKernel.ComponentActivator.ComponentActivatorException : ComponentActivator: could not instantiate Castle.MicroKernel.Internal.LazyEx`1[[CastleTests.Components.B, Castle.Windsor.Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc]]&#xA;  ----&gt; System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.&#xA;  ----&gt; System.Security.VerificationException : Operation could destabilize the runtime.&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(169,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateInstanceCore(ConstructorCandidate constructor, Object[] arguments, Type implType)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(112,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(83,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.Instantiate(CreationContext context)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(62,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.InternalCreate(CreationContext context)&#xA;	MicroKernel\ComponentActivator\AbstractComponentActivator.cs(77,0): at Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Create(CreationContext context, Burden burden)&#xA;	MicroKernel\Lifestyle\AbstractLifestyleManager.cs(79,0): at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)&#xA;	MicroKernel\Lifestyle\AbstractLifestyleManager.cs(70,0): at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)&#xA;	MicroKernel\Handlers\DefaultHandler.cs(152,0): at Castle.MicroKernel.Handlers.DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden&amp; burden)&#xA;	MicroKernel\Handlers\DefaultHandler.cs(97,0): at Castle.MicroKernel.Handlers.DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)&#xA;	MicroKernel\Handlers\AbstractHandler.cs(190,0): at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)&#xA;	MicroKernel\Handlers\DefaultGenericHandler.cs(186,0): at Castle.MicroKernel.Handlers.DefaultGenericHandler.Resolve(CreationContext context, Boolean instanceRequired)&#xA;	MicroKernel\Handlers\AbstractHandler.cs(190,0): at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)&#xA;	MicroKernel\DefaultKernel.cs(721,0): at Castle.MicroKernel.DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments, IReleasePolicy policy)&#xA;	MicroKernel\DefaultKernel_Resolve.cs(234,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)&#xA;	MicroKernel\DefaultKernel_Resolve.cs(124,0): at Castle.MicroKernel.DefaultKernel.Resolve(Type service, IDictionary arguments)&#xA;	Windsor\WindsorContainer.cs(608,0): at Castle.Windsor.WindsorContainer.Resolve[T](Object argumentsAsAnonymousType)&#xA;	LazyComponentsTestCase.cs(172,0): at CastleTests.LazyComponentsTestCase.Can_resolve_lazy_component_requiring_arguments_inline()&#xA;	--TargetInvocationException&#xA;	at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)&#xA;	at System.Reflection.RuntimeConstructorInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)&#xA;	at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(193,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.FastCreateInstance(Type implType, Object[] arguments, ConstructorCandidate constructor)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(147,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateInstanceCore(ConstructorCandidate constructor, Object[] arguments, Type implType)&#xA;	--VerificationException&#xA;	at Castle.MicroKernel.Internal.LazyEx`1..ctor(IKernel kernel, IDictionary arguments)&#xA;&#xA;Test 'CastleTests.LazyComponentsTestCase.Can_resolve_lazy_component_with_override' failed: Castle.MicroKernel.ComponentActivator.ComponentActivatorException : ComponentActivator: could not instantiate Castle.MicroKernel.Internal.LazyEx`1[[CastleTests.Components.A, Castle.Windsor.Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc]]&#xA;  ----&gt; System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.&#xA;  ----&gt; System.Security.VerificationException : Operation could destabilize the runtime.&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(169,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateInstanceCore(ConstructorCandidate constructor, Object[] arguments, Type implType)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(112,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(83,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.Instantiate(CreationContext context)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(62,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.InternalCreate(CreationContext context)&#xA;	MicroKernel\ComponentActivator\AbstractComponentActivator.cs(77,0): at Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Create(CreationContext context, Burden burden)&#xA;	MicroKernel\Lifestyle\AbstractLifestyleManager.cs(79,0): at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)&#xA;	MicroKernel\Lifestyle\AbstractLifestyleManager.cs(70,0): at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)&#xA;	MicroKernel\Handlers\DefaultHandler.cs(152,0): at Castle.MicroKernel.Handlers.DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden&amp; burden)&#xA;	MicroKernel\Handlers\DefaultHandler.cs(97,0): at Castle.MicroKernel.Handlers.DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)&#xA;	MicroKernel\Handlers\AbstractHandler.cs(190,0): at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)&#xA;	MicroKernel\Handlers\DefaultGenericHandler.cs(186,0): at Castle.MicroKernel.Handlers.DefaultGenericHandler.Resolve(CreationContext context, Boolean instanceRequired)&#xA;	MicroKernel\Handlers\AbstractHandler.cs(190,0): at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)&#xA;	MicroKernel\DefaultKernel.cs(721,0): at Castle.MicroKernel.DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments, IReleasePolicy policy)&#xA;	MicroKernel\DefaultKernel_Resolve.cs(234,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)&#xA;	MicroKernel\DefaultKernel_Resolve.cs(124,0): at Castle.MicroKernel.DefaultKernel.Resolve(Type service, IDictionary arguments)&#xA;	Windsor\WindsorContainer.cs(608,0): at Castle.Windsor.WindsorContainer.Resolve[T](Object argumentsAsAnonymousType)&#xA;	LazyComponentsTestCase.cs(187,0): at CastleTests.LazyComponentsTestCase.Can_resolve_lazy_component_with_override()&#xA;	--TargetInvocationException&#xA;	at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)&#xA;	at System.Reflection.RuntimeConstructorInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)&#xA;	at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(193,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.FastCreateInstance(Type implType, Object[] arguments, ConstructorCandidate constructor)&#xA;	MicroKernel\ComponentActivator\DefaultComponentActivator.cs(147,0): at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateInstanceCore(ConstructorCandidate constructor, Object[] arguments, Type implType)&#xA;	--VerificationException&#xA;	at Castle.MicroKernel.Internal.LazyEx`1..ctor(IKernel kernel, String overrideComponentName)&#xA;&#xA;Test 'CastleTests.Lifestyle.ScopedLifestyleTestCase.Transient_depending_on_scoped_component_is_not_tracked_by_the_container' failed:&#xA;  Expected: False&#xA;  But was:  True&#xA;	Lifestyle\ScopedLifestyleTestCase.cs(185,0): at CastleTests.Lifestyle.ScopedLifestyleTestCase.Transient_depending_on_scoped_component_is_not_tracked_by_the_container()&#xA;&#xA;1247 passed, 3 failed, 53 skipped (see 'Task List'), took 59,62 seconds (NUnit 2.5.10).&#xA;&#xA;------ Test started: Assembly: Castle.Facilities.WcfIntegration.Tests.dll ------&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.PerWcfOperationLifestyleTestCase.Dependencies_should_be_reused_among_services_within_call' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\Lifestyle\PerWcfOperationLifestyleTestCase.cs(33,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfOperationLifestyleTestCase.SetUp()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\Lifestyle\PerWcfOperationLifestyleTestCase.cs(56,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfOperationLifestyleTestCase.TearDown()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.PerWcfOperationLifestyleTestCase.Dependencies_should_not_reused_among_between_calls' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\Lifestyle\PerWcfOperationLifestyleTestCase.cs(33,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfOperationLifestyleTestCase.SetUp()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\Lifestyle\PerWcfOperationLifestyleTestCase.cs(56,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfOperationLifestyleTestCase.TearDown()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.Services_should_be_reused_among_calls_within_session' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs(35,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.SetUp()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs(61,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.TearDown()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.Services_should_not_be_shared_between_two_concurrent_sessions' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs(35,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.SetUp()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs(61,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.TearDown()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.Services_should_not_be_shared_between_two_subsequent_sessions' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs(35,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.SetUp()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\Lifestyle\PerWcfSessionLifestyleTestCase.cs(61,0): at Castle.Facilities.WcfIntegration.Tests.PerWcfSessionLifestyleTestCase.TearDown()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCaptureRequestsAndResponsesAtEndpointLevel' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(667,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCaptureRequestsAndResponsesAtEndpointLevel()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCaptureRequestsAndResponsesAtServiceLevel' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(699,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCaptureRequestsAndResponsesAtServiceLevel()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHost' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(45,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHost()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostUsingDefaultBinding' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(106,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostUsingDefaultBinding()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostWithListenAddress' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(204,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostWithListenAddress()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostWithMultipleEndpoints' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(146,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostWithMultipleEndpoints()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostWithMultipleServiceModels' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(238,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostWithMultipleServiceModels()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostWithRelativeEndpoints' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(173,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostAndOpenHostWithRelativeEndpoints()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostWithAspNetCompatibility' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(789,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanCreateServiceHostWithAspNetCompatibility()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanGiveFriendlyErrorMessageForUunresolvedServiceDependenciesIfOpenEagerly' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(749,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanGiveFriendlyErrorMessageForUunresolvedServiceDependenciesIfOpenEagerly()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanModifyRequestsAndResponses' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(725,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanModifyRequestsAndResponses()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanPubishMEXEndpointsUsingCustomAddress' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(848,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanPubishMEXEndpointsUsingCustomAddress()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanPubishMEXEndpointsUsingDefaults' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(819,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanPubishMEXEndpointsUsingDefaults()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanPubishMEXEndpointsWithoutBaseAddresses' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(877,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanPubishMEXEndpointsWithoutBaseAddresses()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanPubishMEXEndpointsWithoutBaseAddressesUsingCustomAddress' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(901,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.CanPubishMEXEndpointsWithoutBaseAddressesUsingCustomAddress()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.Will_apply_multiple_error_handlers_to_service' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(479,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.Will_apply_multiple_error_handlers_to_service()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.Will_apply_multiple_error_handlers_to_service_explicitly' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(586,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.Will_apply_multiple_error_handlers_to_service_explicitly()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyErrorHandlersToEndpointsExplicitly' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(627,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyErrorHandlersToEndpointsExplicitly()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyErrorHandlersToServices' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(443,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyErrorHandlersToServices()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyErrorHandlersToServicesExplicitly' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(547,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyErrorHandlersToServicesExplicitly()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyExplcitScopedKeyBehaviors' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(359,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyExplcitScopedKeyBehaviors()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyExplcitScopedServiceBehaviors' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(390,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyExplcitScopedServiceBehaviors()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyInstanceBehaviors' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(417,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyInstanceBehaviors()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyServiceScopedBehaviors' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(275,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyServiceScopedBehaviors()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyServiceScopedBehaviorsToMultipleEndpoints' failed:&#xA;	System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(331,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillApplyServiceScopedBehaviorsToMultipleEndpoints()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillNotApplyErrorHandlersToServicesIfExplicit' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(516,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillNotApplyErrorHandlersToServicesIfExplicit()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillRegisterServiceWithServiceCatalog' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(956,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillRegisterServiceWithServiceCatalog()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillRegisterServiceWithServiceCatalogInDomain' failed: System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\ServiceHostFixture.cs(991,0): at Castle.Facilities.WcfIntegration.Tests.ServiceHostFixture.WillRegisterServiceWithServiceCatalogInDomain()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanAccessDiscoverServiceEndpointMetadata' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanAccessIClientChannelChannelInterface' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanAddAdditionalDiscoveryMetadata' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanAddMessageHeader' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCallBaseInterfaceAsynchronously' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCallChannelOperationsAsynchronously' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCallChannelOperationsAsynchronouslyOnAsyncService' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCallChannelOperationsAsynchronouslyUsingServiceEndpoint' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCallChannelOperationsAsynchronouslyUsingStandardAsyncPattern' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCallChannelOperationsAsynchronouslyWithExplicitAsyncPattern' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCallChannelOperationsAsynchronouslyWithExplicitInterface' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCallChannelOperationsWithOutAndRefArgumentsAsynchronously' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCaptureRequestsAndResponses' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCaptureRequestsAndResponsesUsingCustomFormat' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCaptureRequestsAndResponsesUsingExplicitFormatter' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCaptureRequestsAndResponsesUsingFormatExtension' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanCaptureRequestsAndResponsesUsingGlobalFormatter' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanDiscoverServiceEndpointAndInferBinding' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanDiscoverServiceEndpointAndInferBindingWithCombindedScopes' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanDiscoverServiceEndpointAndInferBindingWithEndpointScope' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanDiscoverServiceEndpointAndInferBindingWithScope' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanDiscoverServiceEndpointFromMetadata' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanDiscoverServiceEndpointFromMetadataWithPreference' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanDiscoverServiceEndpointFromMetadataWithScope' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanDiscoverServiceEndpointInManagedMode' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanInhibitRecoveryFromAnUnhandledException' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanLazilyResolveClientAssociatedWithChannelUsingSuppliedEndpoint' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanLazilyResolveClientAssociatedWithChannelUsingSuppliedModel' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanModifyRequestAndResponseBody' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanModifyRequestAndResponseBodyAndAddHeaders' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanProxyChannelFactoriesForAsyncSupport' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanRecoverFromCommunicationException' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanRecoverFromCommunicationExceptionAsynchronously' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanRecoverFromCommunicationExceptionOnEndpoint' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelFromConfiguration' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelFromXmlConfiguration' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingDefaultBinding' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingFactoryWithConfiguration' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingFactoryWithEndpoint' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingFactoryWithModel' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingFactoryWithUri' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingRelativeAddress' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingSuppliedEndpoint' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingSuppliedModel' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientAssociatedWithChannelUsingViaAddress' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientInterfaceAssociatedWithChannel' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientInterfaceWithOutAndRefArguments' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanResolveClientWhenListedInTheFacility' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.CanUseOperationContextWithClient' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.ThrowsEndPointNotFoundException' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillApplyChannelFactoryAwareExtensions' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillApplyChannelFactoryAwareExtensionsOnModel' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillApplyChannelFactoryAwareExtensionsWhenChannelCreated' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillApplyChannelFactoryAwareExtensionsWhenChannelRefreshed' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillApplyCustomInterceptorsWhenCallingMethodsAsynchronously' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillApplyExlpicitScopedKeyEndpointBehaviors' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillApplyExlpicitScopedServiceEndpointExtensions' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillApplyOperationBehaviors' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillCallBackResultWhenAsynchronousOperationCompletes' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillCallBackWhenAsynchronousOperationCompletes' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillCloseChannelWhenTransientClientReleased' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillCreateNewXmlDocumentForNormalActions' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillGetFriendlyErrorWhenFactoryIsNotAvailable' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillGetFriendlyErrorWhenFactoryIsNotAvailable_because_TypedFactoryFacility_was_registered_after_WCFFacility' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillNotDiscoverServiceEndpointIfScopesDontMatch' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillRecoverFromAnUnhandledException' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillRecoverFromAnUnhandledExceptionAsynchronously' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillRecoverFromAnUnhandledExceptionWithChannelUsingSuppliedModel' failed:&#xA;	SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillReleaseAllExtensionsWhenUnregistered' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.WillUseSameXmlDocumentForConsecutiveModifications' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Client\WcfClientFixture.cs(53,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Client\WcfClientFixture.cs(92,0): at Castle.Facilities.WcfIntegration.Tests.WcfClientFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.CanCallServiceAndGetValueFromWindsorConfig' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\WcfServiceFixture.cs(35,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\WcfServiceFixture.cs(64,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.CanUseStandardDynamicProxyInterceptorsOnServices' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\WcfServiceFixture.cs(35,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\WcfServiceFixture.cs(64,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.WillApplyEndPointBehaviors' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\WcfServiceFixture.cs(35,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\WcfServiceFixture.cs(64,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.WillApplyServiceAwareExtensions' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\WcfServiceFixture.cs(35,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\WcfServiceFixture.cs(64,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestCleanup()&#xA;&#xA;Test 'Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.WillApplyServiceBehaviors' failed: SetUp : System.ServiceModel.CommunicationException : The TransportManager failed to listen on the supplied URI using the NetTcpPortSharing service: failed to start the service because it is disabled. An administrator can enable it by running 'sc.exe config NetTcpPortSharing start= demand'..&#xA;  ----&gt; System.InvalidOperationException : Cannot start service NetTcpPortSharing on computer '.'.&#xA;  ----&gt; System.ComponentModel.Win32Exception : The service cannot be started, either because it is disabled or because it has no enabled devices associated with it&#xA;TearDown : System.NullReferenceException : Object reference not set to an instance of an object.&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.Open(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.StartListen(Boolean isReconnecting)&#xA;	at System.ServiceModel.Channels.SharedConnectionListener..ctor(BaseUriWithWildcard baseAddress, Int32 queueId, Guid token, Func`2 onDuplicatedViaCallback)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpenInternal(Int32 queueId, Guid token)&#xA;	at System.ServiceModel.Channels.SharedTcpTransportManager.OnOpen()&#xA;	at System.ServiceModel.Channels.TransportManager.Open(TransportChannelListener channelListener)&#xA;	at System.ServiceModel.Channels.TransportManagerContainer.Open(SelectTransportManagersCallback selectTransportManagerCallback)&#xA;	at System.ServiceModel.Channels.TransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.ConnectionOrientedTransportChannelListener.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.TcpChannelListener`2.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)&#xA;	at System.ServiceModel.Channels.CommunicationObject.Open()&#xA;	Service\WcfServiceExtension.cs(272,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateAndOpenServiceHost(IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(247,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.CreateServiceHostWhenHandlerIsValid(IHandler handler, IWcfServiceModel serviceModel, ComponentModel model)&#xA;	Service\WcfServiceExtension.cs(140,0): at Castle.Facilities.WcfIntegration.WcfServiceExtension.Kernel_ComponentRegistered(String key, IHandler handler)&#xA;	at Castle.MicroKernel.ComponentDataDelegate.Invoke(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel_Events.cs(77,0): at Castle.MicroKernel.DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)&#xA;	MicroKernel\DefaultKernel.cs(691,0): at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.RegisterHandler(String name, IHandler handler, Boolean skipRegistration)&#xA;	MicroKernel\Handlers\DefaultHandlerFactory.cs(43,0): at Castle.MicroKernel.Handlers.DefaultHandlerFactory.Create(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(266,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model, Boolean isMetaHandler)&#xA;	MicroKernel\DefaultKernel.cs(274,0): at Castle.MicroKernel.DefaultKernel.AddCustomComponent(ComponentModel model)&#xA;	MicroKernel\Registration\ComponentRegistration.cs(1121,0): at Castle.MicroKernel.Registration.ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)&#xA;	MicroKernel\DefaultKernel.cs(499,0): at Castle.MicroKernel.DefaultKernel.Register(IRegistration[] registrations)&#xA;	Windsor\WindsorContainer.cs(483,0): at Castle.Windsor.WindsorContainer.Register(IRegistration[] registrations)&#xA;	Service\WcfServiceFixture.cs(35,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestInitialize()&#xA;	--InvalidOperationException&#xA;	at System.ServiceProcess.ServiceController.Start(String[] args)&#xA;	at System.ServiceProcess.ServiceController.Start()&#xA;	at System.ServiceModel.Channels.SharedConnectionListener.SharedListenerProxy.HandleServiceStart(Boolean isReconnecting)&#xA;	--Win32Exception&#xA;	&#xA;	--TearDown&#xA;	Service\WcfServiceFixture.cs(64,0): at Castle.Facilities.WcfIntegration.Tests.WcfServiceFixture.TestCleanup()&#xA;&#xA;44 passed, 108 failed, 4 skipped (see 'Task List'), took 32,63 seconds (NUnit 2.5.10).&#xA;&#xA;========== Total Tests: 1291 passed, 111 failed, 57 skipped, took 94,17 seconds ==========&#xA;" created="1354179639273" />
  </issue>
</issues>