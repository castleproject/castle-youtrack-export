<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Minor</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions" />
    <field name="Affected versions" />
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>144</value>
    </field>
    <field name="summary">
      <value>Cannot Register Abstract Components With Interceptor as of r5530</value>
    </field>
    <field name="description">
      <value>I think DefaultComponentActivator should make an exception for abstract components that have interceptors set on them. Example:

public abstract class Scale
{
	public virtual bool IsOn { get; set; }
	public virtual double Weight { get; set; }
}

public class DataBindingInterceptor
	: IInterceptor
{
	protected PropertyChangedEventHandler propertyChanged = delegate { };

	#region IInterceptor Members

	public void Intercept(IInvocation invocation)
	{
		if (invocation.Method.DeclaringType ==
		    typeof(INotifyPropertyChanged))
		{
			var handler = (PropertyChangedEventHandler)invocation.Arguments[0];
			if (invocation.Method.Name.StartsWith("add_"))
			{
				propertyChanged += handler;
			}
			else
			{
				propertyChanged -= handler;
			}
			invocation.ReturnValue = null;
			return;
		}

		Invoke(invocation);

		RaiseIfRequired(invocation, invocation.Proxy);
	}

	#endregion

	private void RaiseIfRequired(IInvocation invocation, object target)
	{
		if (invocation.Method.Name.StartsWith("set_"))
		{
			propertyChanged(target, new PropertyChangedEventArgs(invocation.Method.Name.Substring(4)));
		}
	}

	protected virtual void Invoke(IInvocation invocation)
	{
		invocation.Proceed();
	}
}

static void Main()
{
	Kernel.Register(Component.For&lt;DataBindingInterceptor&gt;().Named("dataBindingInterceptor").LifeStyle.Transient);
	Kernel.Register(Component.For&lt;Scale&gt;()
	                	.Interceptors(new InterceptorReference("dataBindingInterceptor")).Anywhere
	                	.Proxy.AdditionalInterfaces(typeof (INotifyPropertyChanged)));
	
}
</value>
    </field>
    <field name="created">
      <value>1233849398000</value>
    </field>
    <field name="updated">
      <value>1283220838916</value>
    </field>
    <field name="reporterName">
      <value>captainramen</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1233904560000</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-18[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="cneuwirt" text="* '''Status''' changed from ''Open'' to ''Work Started''.&#xD;&#xA;" created="1233904260000" />
    <comment author="cneuwirt" text="* '''Resolution''' set to ''Fixed''.&#xD;&#xA;* '''Status''' changed from ''Work Started'' to ''Resolved''.&#xD;&#xA;" created="1233904560000" />
    <comment author="ayenderahien" text="* '''Status''' changed from ''Resolved'' to ''Closed''.&#xD;&#xA;" created="1241441880000" />
  </issue>
</issues>