<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Normal</value>
    </field>
    <field name="Type">
      <value>Feature</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>Registration API</value>
    </field>
    <field name="Fix versions">
      <value>3.2</value>
    </field>
    <field name="Affected versions">
      <value>3.0</value>
      <value>3.1</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>348</value>
    </field>
    <field name="summary">
      <value>Explict sort order for convention-based configuration would be nice</value>
    </field>
    <field name="description">
      <value>In Castle Windsor, one can do convention-based configuration using

{code:lang=C#}container.Register(Classes/* from one or more assemblies...*/);{code}

However, the order in which components are registered is non-deterministic. A bit of experimentation shows that while the sort order seems stable on a single machine, it varies from machine to machine.

This is a problem if you have more than one class in an assembly which implements the same interface - let's say that XFoo and YFoo both implement IFoo. On some machines, dependency graphs are going to be wired with XFoo, while others are going to be wired with YFoo.

It would be nice if it was possible to explicitly specify the sort order.

The API might look like this

{code:lang=C#}container.Register(Classes
    .FromThisAssembly()
    .OrderBy(t =&gt; t.AssemblyQualifiedName));{code}

The OrderBy method should mirror the LINQ method signatures:

{code:lang=C#}OrderBy&lt;TSource, TKey&gt;(Func&lt;TSource, TKey&gt; keySelector);
OrderBy&lt;TSource, TKey&gt;(Func&lt;TSource, TKey&gt; keySelector, IComparer&lt;TKey&gt; comparer);
OrderByDescending&lt;TSource, TKey&gt;(Func&lt;TSource, TKey&gt; keySelector);
OrderByDescending&lt;TSource, TKey&gt;(Func&lt;TSource, TKey&gt; keySelector, IComparer&lt;TKey&gt; comparer);{code}

I'd be happy to give it a shot as a pull request if this suggestion is acceptable.</value>
    </field>
    <field name="created">
      <value>1343893168711</value>
    </field>
    <field name="updated">
      <value>1351950597690</value>
    </field>
    <field name="reporterName">
      <value>Mark.Seemann</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1351950478804</value>
    </field>
    <field name="voterName">
      <value>xtoff</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-18[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="xtoff" text="While I agree that reflection ordering should not be trusted and Windsor probably ought to enforce deterministic ordering, what would be a real life case where users would need such a fine grained control?&#xA;&#xA;Scenarios where IsDefault()/IsFallback() wouldn't suffice?" created="1343906522515" />
    <comment author="Mark.Seemann" text="Can you elaborate on what you mean by IsDefault()/IsFallback()?" created="1343930585246" />
    <comment author="xtoff" text="Mark, those are existing methods to enforce certain ordering behaviour of components each supporting same service.&#xA;&#xA;[IsDefault()|http://docs.castleproject.org/Windsor.Whats-New-In-Windsor-3.ashx#Component_can_now_force_being_default_for_its_services_without_needing_to_be_the_first_one_registered_6]&#xA;&#xA;[IsFallback()|http://docs.castleproject.org/Windsor.Whats-New-In-Windsor-31.ashx#Fallback_components_4]" created="1343938038757" />
    <comment author="Mark.Seemann" text="Right, thanks.&#xA;&#xA;These methods only really make sense for individual components. The whole idea of convention-based registration is that once you have your conventions in place, you shouldn't really have to fiddle with the container configuration all that much.&#xA;&#xA;Basically, I currently use a configuration where the bulk of the registrations simply looks like this:&#xA;&#xA;{code:lang=C#}container.Register(Classes&#xA;    .FromThisAssembly()&#xA;    .WithServiceAllInterfaces());{code}&#xA;&#xA;There's a little more to it than this, but the idea is to enable team members to focus on adding feature code without having them worry about how wiring actually happens. (Some people are scared of DI Containers, believe it or not...) That actually works pretty well, apart from the ordering issue described above. Because ordering is non-deterministic, some people see different behavior than other people. This causes bugs and developers (rightly) blame the DI Container for it." created="1343967008621" />
    <comment author="xtoff" text="Thanks for that Mark,&#xA;&#xA;So can you give an example of a scenario where you'd need a meticulous control over ordering of components for a given service, or would just internal deterministic ordering without any new API suffice?" created="1343970281025" />
    <comment author="Mark.Seemann" text="Internal deterministic ordering would definitely be a big step in the right direction. I could probably live with that.&#xA;&#xA;The reason I suggested surfacing it as an API was mostly based on professional experience. The deterministic ordering you'd end up using in Castle Windsor might not be the ordering someone else might prefer in a particular scenario. I just thought it might be a good idea to give people the ability to select this for themselves, instead of trying to figure out a 'single correct' deterministic sort order.&#xA;&#xA;When would that be useful?&#xA;&#xA;When Decorators or Composites are used, it'd be nice to be able to define an explicit sort order. Let's be a bit more concrete, so here's something a team of mine once did:&#xA;&#xA;We had a bunch of Repository interfaces. Let's consider the IFooRepository interface as an example. Obviously we also had a concrete implementation of IFooRepository. This was some years back, so it was based on SQL Server and called SqlFooRepository.&#xA;&#xA;Everything worked well, but as it turned out, performance wasn't too good, so after the fact, we built a set of caching Decorators:&#xA;&#xA;{code:lang=C#}public class CachingFooRepository : IFooRepository&#xA;{&#xA;    public CachingFooRepository(IFooRepository repository)&#xA;    {&#xA;        // ...&#xA;    }&#xA;}{code}&#xA;&#xA;All these caching Repositories we threw into a separate namespace, so we had a project structure like this:&#xA;&#xA;* Caching&#xA;** CachingFooRepository&#xA;** CachingBarRepository&#xA;** CachingBazRepository&#xA;* SqlFooRepository&#xA;* SqlBarRepository&#xA;* SqlBazRepository&#xA;* ...&#xA;&#xA;To utilize Castle Windsor's very nice Decorator convention, it's necessary to register the caching Repositories ''before'' the 'leaf' Repositories. This is certainly possible by doing this:&#xA;&#xA;{code:lang=C#}container.Register(Classes&#xA;    .FromThisAssembly()&#xA;    .Where(t =&gt; t.Namespace.EndsWith(&quot;Caching&quot;))&#xA;    .WithServiceAllInterfaces());&#xA;&#xA;container.Register(Classes&#xA;    .FromThisAssembly()&#xA;    .Where(t =&gt; !t.Namespace.EndsWith(&quot;Caching&quot;))&#xA;    .WithServiceAllInterfaces());&#xA;{code}&#xA;&#xA;(notice the negation in the second statement). This is certainly possible, but an explicit sort order would be more elegant.&#xA;&#xA;I can probably think up some other examples if you're still not convinced." created="1343993206716" />
    <comment author="xtoff" text="Mark,&#xA;&#xA;thanks for the example, however in this case (where there's just single decorator) the following would do the job:&#xA;&#xA;{code lang=cs}&#xA;container.Register(Classes&#xA;    .FromThisAssembly().Pick()&#xA;    .ConfigureIf(t =&gt; t.Namespace.EndsWith(&quot;Caching&quot;), c =&gt; c.IsDefault())&#xA;    .WithServiceAllInterfaces());&#xA;{code}" created="1344036562139" />
    <comment author="Mark.Seemann" text="Right, but I ''do'' tend to Decorate my Decorators too. Some people call this the Russian Doll technique (which is a wonderful metaphor). It's a very effective way of achieving separation of concerns." created="1344069498234" />
    <comment author="xtoff" text="For now the default implementation sorts the types by full name to provide level of determinism.&#xA;&#xA;I didn't add anything to the public registration API but I made it possible to override the default behavior and extend the API with filtering if one so requires." created="1351950597688" />
  </issue>
</issues>