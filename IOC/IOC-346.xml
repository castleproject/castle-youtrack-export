<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Normal</value>
    </field>
    <field name="Type">
      <value>Feature</value>
    </field>
    <field name="State">
      <value>Obsolete</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>Lifestyles</value>
    </field>
    <field name="Fix versions">
      <value>Future</value>
    </field>
    <field name="Affected versions" />
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>346</value>
    </field>
    <field name="summary">
      <value>Possibility to define in which scope to resolve components (e.g. "ResolveInScope(IDisposable scope, ...)")</value>
    </field>
    <field name="description">
      <value>We have implemented LifeStyleScope. We begin a new scope for each new dialog/window to enable e.g. an optimal use of unit of works. It works well, but I had a lot of trouble to enable using factories (for our view models). Reason: because the components are created lazily within a factory, Windsor cannot select the correct instance. What we have done is to also make the factory's lifestyle scoped and pass all scoped components to it right after creation. The factory then passes those cached components as anonymous types during creation. That works for most scenarios but is ugly and complicated.

What I am missing and what would best resolve that use case would be an overload of Resolve, like: ResolveInScope(IDisposable scope [, object args]). This way I could define the scope in which the type and its dependencies have to be resolved.</value>
    </field>
    <field name="created">
      <value>1341402903063</value>
    </field>
    <field name="updated">
      <value>1414997819189</value>
    </field>
    <field name="reporterName">
      <value>AlZi71</value>
    </field>
    <field name="updaterName">
      <value>jonorossi</value>
    </field>
    <field name="resolved">
      <value>1414997819185</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-18[up-to-date]</value>
      <value>User: id = 20-1063[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="xtoff" text="tagging scopes is something that is on my radar but it would require some serious thought and research to implement it properly. I'm happy to start a discussion about it but this is at least a v4 feature&#xA;" created="1341403181648" />
    <comment author="Uli.Anonym" text="Hey Krzysztof, are there any news on this?&#xA;I have the same requirement. Here an example why:&#xA;&#xA;It's the proposed way to use in every form in your UI (like article details, customer order creation) a SessionFactory (in this scenario I talk about NHibernate). After closing the form, the factory is disposed. In each action of the form you create and dispose a session from the factory (of course, there are exclusions). The form has more dependencies for example a calculator. This calculator has a depdency on the SessionFactory too. The form an the calculator should use the same SessionFactory.&#xA;The next thing is, that every form should have it's own scope and it's own SessionFactory." created="1391644377287" />
    <comment author="xtoff" text="@Uli.Anonym would making session factory bound to form not solve that problem?&#xA;&#xA;See the documentation: http://docs.castleproject.org/Windsor.LifeStyles.ashx#Bound_8" created="1394860678368" />
    <comment author="jonorossi" text="Closing this issue as obsolete as there has been no progress. Relog this issue on GitHub if you want to continue the discussion.&#xA;&#xA;https://github.com/castleproject/Windsor/issues" created="1414997819190" updated="1414998020818" />
  </issue>
</issues>