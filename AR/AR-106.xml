<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Feature</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions" />
    <field name="Affected versions">
      <value>RC 1</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>106</value>
    </field>
    <field name="summary">
      <value>Add support for not-found configuration to AR</value>
    </field>
    <field name="description">
      <value>NH allows the user to specify how broken relations are handled. The default behavior  is to throw an exception. But when you are working with a legacy db that has broken relations, this is quite painful. By setting the not-found property to 'ignore' NH suppresses the exception and set the FK to null on the next save.

use it  like this:

[HasMany(typeof(RelationalFoobar), NotFoundBehaviour = NotFoundBehaviour.Ignore)]
public IList SubClasses
{
		get { return subclasses; }
		set { subclasses = value; }
}
</value>
    </field>
    <field name="created">
      <value>1166049035000</value>
    </field>
    <field name="updated">
      <value>1167412213000</value>
    </field>
    <field name="reporterName">
      <value>ernst</value>
    </field>
    <field name="updaterName">
      <value>ernst</value>
    </field>
    <field name="resolved">
      <value>1282136245588</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
  </issue>
</issues>