<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Task</value>
    </field>
    <field name="State">
      <value>Obsolete</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>Framework</value>
    </field>
    <field name="Fix versions" />
    <field name="Affected versions">
      <value>Future</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>226</value>
    </field>
    <field name="summary">
      <value>Multiple Database Configurations Not Being Differentiated By Interfaces</value>
    </field>
    <field name="description">
      <value>Using the latest from the trunk, only abstract base classes will be used in SessionFactoryHolder to determine which nh configuration a model will  use.  Interfaces one level deep in an object model heirarchy are ignored.

For Example, assuming there is the default config section, another section is added that has a config element like this:

&lt;config type="MyProject.IMyInterface, MyProject"&gt;...&lt;/config&gt;

and you have this interface defined:

public interface IMyInterface{}

and an active record class like so:

[ActiveRecord]
public class Authors : IMyInterface{}

In this example, the Authors class will use the default nh config and not the one bound to IMyInterface.</value>
    </field>
    <field name="created">
      <value>1219670929000</value>
    </field>
    <field name="updated">
      <value>1414394994991</value>
    </field>
    <field name="reporterName">
      <value>chrcar01</value>
    </field>
    <field name="updaterName">
      <value>jonorossi</value>
    </field>
    <field name="resolved">
      <value>1414394994983</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="mzywitza" text="Sorry, but I won't apply it. Differing by interface means that we have to check that no more than one of those interfaces is implemented by the processed class.&#xA;&#xA;At the very least, we need an unit test that checks that there is a determinable behaviour in such cases, regardless of whether this behaviour is already offered implicitly by the existing code." created="1227132771000" />
  </issue>
</issues>