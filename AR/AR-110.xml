<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Feature</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>Framework</value>
    </field>
    <field name="Fix versions">
      <value>RC 2</value>
    </field>
    <field name="Affected versions">
      <value>RC 2</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>110</value>
    </field>
    <field name="summary">
      <value>Support rollback on TransactionScope Dispose without commit.</value>
    </field>
    <field name="description">
      <value>Quite often, automatically committing the AR transaction on Dispose is undesired.  In particular it makes the "using" syntax unreliable because the transaction will be committed even if an exception occurred during processing.  For such usage it would be nice to have the option of automatically rolling back instead.

eg.  Something like the following:

using (TransactionScope s = new TransactionScope(OnDispose.Rollback))
{
    // do stuff
    // if an exception happens the transaction is automatically rolled back.

   s.VoteCommit(); // last line
}

This is more compact and less error-prone than the usual try/catch/finally code.</value>
    </field>
    <field name="created">
      <value>1166479167000</value>
    </field>
    <field name="updated">
      <value>1168002032000</value>
    </field>
    <field name="reporterName">
      <value>jeff@ingenio.com</value>
    </field>
    <field name="updaterName">
      <value>jeff@ingenio.com</value>
    </field>
    <field name="resolved">
      <value>1282136251166</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
  </issue>
</issues>