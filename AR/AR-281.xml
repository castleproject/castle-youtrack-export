<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Feature</value>
    </field>
    <field name="State">
      <value>Won't fix</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>Generator</value>
    </field>
    <field name="Fix versions" />
    <field name="Affected versions" />
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>281</value>
    </field>
    <field name="summary">
      <value>Generate NHibernate supported Param(s) for ColumnType of Property/Field</value>
    </field>
    <field name="description">
      <value>I have implemented this "missing" functionality and attached a candidate patch.</value>
    </field>
    <field name="created">
      <value>1265497093000</value>
    </field>
    <field name="updated">
      <value>1414999631820</value>
    </field>
    <field name="reporterName">
      <value>ewrayjohnson</value>
    </field>
    <field name="updaterName">
      <value>jonorossi</value>
    </field>
    <field name="resolved">
      <value>1414999631815</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="mzywitza" text="Sorry, but the patch seems outdated and wreaks some havoc here. Can yoe create a new one please?" created="1266491972000" />
    <comment author="ewrayjohnson" text="* '''Components''' set to ''Generator''.&#xD;&#xA;" created="1265497093001" />
    <comment author="ewrayjohnson" text="* '''Attachment''' PropertyTypeParams.patch added.&#xD;&#xA;" created="1265497140000" />
    <comment author="ewrayjohnson" text="* '''Description''' changed from:&#xD;&#xA;{quote}&#xD;&#xA;Index: Attributes/FieldAttribute.cs&#xD;&#xA;===================================================================&#xD;&#xA;--- Attributes/FieldAttribute.cs	(revision 5964)&#xD;&#xA;+++ Attributes/FieldAttribute.cs	(working copy)&#xD;&#xA;@@ -47,8 +47,9 @@&#xD;&#xA; 		private bool unique;&#xD;&#xA; 		private bool update = true;&#xD;&#xA; 		private bool insert = true;&#xD;&#xA;+	    private string _params;&#xD;&#xA; &#xD;&#xA;-		/// &lt;summary&gt;&#xD;&#xA;+	    /// &lt;summary&gt;&#xD;&#xA; 		/// Initializes a new instance of the &lt;see cref=&quot;FieldAttribute&quot;/&gt; class.&#xD;&#xA; 		/// &lt;/summary&gt;&#xD;&#xA; 		public FieldAttribute() &#xD;&#xA;@@ -206,7 +207,16 @@&#xD;&#xA; 			set { type = value; }&#xD;&#xA; 		}&#xD;&#xA; &#xD;&#xA;-		/// &lt;summary&gt;&#xD;&#xA;+        /// &lt;summary&gt;&#xD;&#xA;+        /// Comma separated value of parameters to the ColumnType&#xD;&#xA;+        /// &lt;/summary&gt;&#xD;&#xA;+        public String Params&#xD;&#xA;+        {&#xD;&#xA;+            get { return _params; }&#xD;&#xA;+            set { _params = value; }&#xD;&#xA;+        }&#xD;&#xA;+        &#xD;&#xA;+        /// &lt;summary&gt;&#xD;&#xA; 		/// Gets or sets the default value for a column (used by schema generation). &#xD;&#xA; 		/// Please note that you should be careful to set Insert=false or set the value to the same &#xD;&#xA; 		/// as the default on the database. &#xD;&#xA;Index: Attributes/PropertyAttribute.cs&#xD;&#xA;===================================================================&#xD;&#xA;--- Attributes/PropertyAttribute.cs	(revision 5964)&#xD;&#xA;+++ Attributes/PropertyAttribute.cs	(working copy)&#xD;&#xA;@@ -56,8 +56,9 @@&#xD;&#xA; 		private bool update = true;&#xD;&#xA; 		private bool insert = true;&#xD;&#xA; 		private bool isOverride;&#xD;&#xA;+	    private string _params;&#xD;&#xA; &#xD;&#xA;-		/// &lt;summary&gt;&#xD;&#xA;+	    /// &lt;summary&gt;&#xD;&#xA; 		/// Initializes a new instance of the &lt;see cref=&quot;PropertyAttribute&quot;/&gt; class.&#xD;&#xA; 		/// &lt;/summary&gt;&#xD;&#xA; 		public PropertyAttribute() &#xD;&#xA;@@ -161,7 +162,16 @@&#xD;&#xA; 			set { type = value; }&#xD;&#xA; 		}&#xD;&#xA; &#xD;&#xA;-		/// &lt;summary&gt;&#xD;&#xA;+        /// &lt;summary&gt;&#xD;&#xA;+        /// Comma separated value of parameters to the ColumnType&#xD;&#xA;+        /// &lt;/summary&gt;&#xD;&#xA;+        public String Params&#xD;&#xA;+        {&#xD;&#xA;+            get { return _params; }&#xD;&#xA;+            set { _params = value; }&#xD;&#xA;+        }&#xD;&#xA;+        &#xD;&#xA;+        /// &lt;summary&gt;&#xD;&#xA; 		/// From NHibernate documentation:&#xD;&#xA; 		/// A unique-key attribute can be used to group columns &#xD;&#xA; 		/// in a single unit key constraint. &#xD;&#xA;@@ -232,5 +242,6 @@&#xD;&#xA; 			get { return isOverride; }&#xD;&#xA; 			set { isOverride = value; }&#xD;&#xA; 		}&#xD;&#xA;+&#xD;&#xA; 	}&#xD;&#xA; }&#xD;&#xA;Index: Framework/Internal/Visitors/XmlGenerationVisitor.cs&#xD;&#xA;===================================================================&#xD;&#xA;--- Framework/Internal/Visitors/XmlGenerationVisitor.cs	(revision 5964)&#xD;&#xA;+++ Framework/Internal/Visitors/XmlGenerationVisitor.cs	(working copy)&#xD;&#xA;@@ -263,7 +263,7 @@&#xD;&#xA; 			        MakeAtt(&quot;name&quot;, model.Property.Name),&#xD;&#xA; 			        MakeAtt(&quot;access&quot;, model.PrimaryKeyAtt.AccessString),&#xD;&#xA; 			        MakeAtt(&quot;column&quot;, model.PrimaryKeyAtt.Column),&#xD;&#xA;-			        MakeTypeAtt(model.Property.PropertyType, model.PrimaryKeyAtt.ColumnType),&#xD;&#xA;+			        MakeTypeAtt(&quot;type&quot;, model.Property.PropertyType, model.PrimaryKeyAtt.ColumnType),&#xD;&#xA; 			        WriteIfNotZero(&quot;length&quot;, model.PrimaryKeyAtt.Length),&#xD;&#xA; 			        WriteIfNonNull(&quot;unsaved-value&quot;, unsavedVal));&#xD;&#xA; &#xD;&#xA;@@ -378,7 +378,7 @@&#xD;&#xA; 				        MakeAtt(&quot;name&quot;, keyProp.Name),&#xD;&#xA; 				        MakeAtt(&quot;access&quot;, keyPropAttr.AccessString),&#xD;&#xA; 				        MakeAtt(&quot;column&quot;, keyPropAttr.Column),&#xD;&#xA;-				        MakeTypeAtt(keyProp.PropertyType, keyPropAttr.ColumnType),&#xD;&#xA;+				        MakeTypeAtt(&quot;type&quot;, keyProp.PropertyType, keyPropAttr.ColumnType),&#xD;&#xA; 				        WriteIfNotZero(&quot;length&quot;, keyPropAttr.Length),&#xD;&#xA; 				        WriteIfNonNull(&quot;unsaved-value&quot;, keyPropAttr.UnsavedValue),&#xD;&#xA; 				        WriteIfTrue(&quot;not-null&quot;, keyPropAttr.NotNull),&#xD;&#xA;@@ -414,7 +414,7 @@&#xD;&#xA; 			if (AppliesToCurrentTable(att))&#xD;&#xA; 			{&#xD;&#xA; 				WriteProperty(model.Property.Name, model.Property.PropertyType, att.AccessString,&#xD;&#xA;-							  att.ColumnType, att.Insert,&#xD;&#xA;+							  att.ColumnType, att.Params, att.Insert,&#xD;&#xA; 							  att.Update, att.Formula, att.Column,&#xD;&#xA; 							  att.Length, att.NotNull, att.Unique, att.UniqueKey, att.SqlType, att.Index, att.Check, att.Default);&#xD;&#xA; 			}&#xD;&#xA;@@ -462,7 +462,7 @@&#xD;&#xA; 			if (AppliesToCurrentTable(att))&#xD;&#xA; 			{&#xD;&#xA; 				WriteProperty(model.Field.Name, model.Field.FieldType, att.AccessString,&#xD;&#xA;-							  att.ColumnType, att.Insert,&#xD;&#xA;+							  att.ColumnType, att.Params, att.Insert,&#xD;&#xA; 							  att.Update, att.Formula, att.Column,&#xD;&#xA; 							  att.Length, att.NotNull, att.Unique, att.UniqueKey, att.SqlType, att.Index, att.Check, att.Default);&#xD;&#xA; 			}&#xD;&#xA;@@ -578,7 +578,7 @@&#xD;&#xA; 			        MakeAtt(&quot;name&quot;, model.Property.Name),&#xD;&#xA; 			        MakeAtt(&quot;access&quot;, model.VersionAtt.AccessString),&#xD;&#xA; 			        MakeAtt(&quot;column&quot;, model.VersionAtt.Column),&#xD;&#xA;-			        MakeTypeAtt(model.Property.PropertyType, model.VersionAtt.Type),&#xD;&#xA;+			        MakeTypeAtt(&quot;type&quot;, model.Property.PropertyType, model.VersionAtt.Type),&#xD;&#xA; 			        WriteIfNonNull(&quot;unsaved-value&quot;, unsavedValue));&#xD;&#xA; 		}&#xD;&#xA; &#xD;&#xA;@@ -819,16 +819,18 @@&#xD;&#xA; 		{&#xD;&#xA; 			CompositeUserTypeAttribute attribute = model.Attribute;&#xD;&#xA; 			BeginWriteProperty(attribute.AccessString, MakeTypeName(attribute.CompositeType), null, attribute.Insert,&#xD;&#xA;-			                   model.Member.Name, model.MemberType, attribute.Update);&#xD;&#xA;+			                   model.Member.Name, model.MemberType, attribute.Update, null);&#xD;&#xA; &#xD;&#xA; 			Ident();&#xD;&#xA; &#xD;&#xA;-			for (int i = 0; i &lt; attribute.ColumnNames.Length; i++)&#xD;&#xA;+		    for (int i = 0; i &lt; attribute.ColumnNames.Length; i++)&#xD;&#xA; 			{&#xD;&#xA; 				WriteColumn(null, attribute.ColumnNames[i], null, attribute.Length[i], false, null, false, null, null);&#xD;&#xA; 			}&#xD;&#xA; &#xD;&#xA;-			Dedent();&#xD;&#xA;+            WriteColumnType(model.MemberType, MakeTypeName(attribute.CompositeType), null);&#xD;&#xA;+            &#xD;&#xA;+            Dedent();&#xD;&#xA; &#xD;&#xA; 			EndWriteProperty();&#xD;&#xA; 		}&#xD;&#xA;@@ -1107,11 +1109,11 @@&#xD;&#xA; 			}&#xD;&#xA; 		}&#xD;&#xA; &#xD;&#xA;-	    private String MakeTypeAtt(Type type, String typeName)&#xD;&#xA;-		{&#xD;&#xA;-			if (typeName != null)&#xD;&#xA;+	    private string MakeTypeAtt(string attrName, Type type, string typeName)&#xD;&#xA;+	    {&#xD;&#xA;+	        if (typeName != null)&#xD;&#xA; 			{&#xD;&#xA;-				return MakeAtt(&quot;type&quot;, typeName);&#xD;&#xA;+				return MakeAtt(attrName, typeName);&#xD;&#xA; 			}&#xD;&#xA; 			else&#xD;&#xA; 			{&#xD;&#xA;@@ -1121,16 +1123,16 @@&#xD;&#xA; 				}&#xD;&#xA; 				if (type.IsPrimitive || type == typeof(String))&#xD;&#xA; 				{&#xD;&#xA;-					return MakeAtt(&quot;type&quot;, type.Name);&#xD;&#xA;+					return MakeAtt(attrName, type.Name);&#xD;&#xA; 				}&#xD;&#xA; 				else&#xD;&#xA; 				{&#xD;&#xA;-					return MakeAtt(&quot;type&quot;, type.FullName);&#xD;&#xA;+					return MakeAtt(attrName, type.FullName);&#xD;&#xA; 				}&#xD;&#xA; 			}&#xD;&#xA;-		}&#xD;&#xA;+	    }&#xD;&#xA; &#xD;&#xA;-		private String MakeClassAtt(Type type)&#xD;&#xA;+	    private String MakeClassAtt(Type type)&#xD;&#xA; 		{&#xD;&#xA; 			if (type.IsEnum) return String.Empty;&#xD;&#xA; &#xD;&#xA;@@ -1247,23 +1249,52 @@&#xD;&#xA; 			}&#xD;&#xA; 		}&#xD;&#xA; &#xD;&#xA;-		private void WriteProperty(String name, Type propType, String accessString, String columnType,&#xD;&#xA;-		                           bool insert, bool update, String formula,&#xD;&#xA;-		                           String column, int length, bool notNull, bool unique,&#xD;&#xA;-		                           String uniqueKey, String sqlType, String index, String check, String @default)&#xD;&#xA;+        private void WriteProperty(String name, Type propType, String accessString, String columnType, String @params,&#xD;&#xA;+                                   bool insert, bool update, String formula,&#xD;&#xA;+                                   String column, int length, bool notNull, bool unique,&#xD;&#xA;+                                   String uniqueKey, String sqlType, String index, String check, String @default)&#xD;&#xA; 		{&#xD;&#xA;-			BeginWriteProperty(accessString, columnType, formula, insert, name, propType, update);&#xD;&#xA;+            BeginWriteProperty(accessString, columnType, formula, insert, name, propType, update, @params);&#xD;&#xA; 			&#xD;&#xA; 			Ident();&#xD;&#xA; &#xD;&#xA;-			WriteColumn(check, column, index, length, notNull, sqlType, unique, uniqueKey, @default);&#xD;&#xA;-			&#xD;&#xA;-			Dedent();&#xD;&#xA;+            WriteColumn(check, column, index, length, notNull, sqlType, unique, uniqueKey, @default);&#xD;&#xA; &#xD;&#xA;+            WriteColumnType(propType, columnType, @params);&#xD;&#xA;+&#xD;&#xA;+		    Dedent();&#xD;&#xA;+&#xD;&#xA; 			EndWriteProperty();&#xD;&#xA; 		}&#xD;&#xA; &#xD;&#xA;-		private void EndWriteProperty()&#xD;&#xA;+	    private void WriteColumnType(Type type, string typeName, string @params)&#xD;&#xA;+	    {&#xD;&#xA;+	        string nameAttribute = MakeTypeAtt(&quot;name&quot;, type, typeName);&#xD;&#xA;+            if (@params != null &amp;&amp; !string.IsNullOrEmpty(nameAttribute))&#xD;&#xA;+            {&#xD;&#xA;+                AppendF(&quot;&lt;type{0}&gt;&quot;, nameAttribute);&#xD;&#xA;+&#xD;&#xA;+                Ident();&#xD;&#xA;+&#xD;&#xA;+                String[] paras = @params.Split(',');&#xD;&#xA;+&#xD;&#xA;+                foreach (String param in paras)&#xD;&#xA;+                {&#xD;&#xA;+                    int eqIndex = param.IndexOf(&quot;=&quot;);&#xD;&#xA;+                    //need to handle parameters that may contains =, so we will take into account only the first one&#xD;&#xA;+                    string paramName = param.Substring(0, eqIndex);&#xD;&#xA;+                    string paramValue = param.Substring(eqIndex + 1);&#xD;&#xA;+&#xD;&#xA;+                    AppendF(&quot;&lt;param name=\&quot;{0}\&quot;&gt;{1}&lt;/param&gt;&quot;, paramName, paramValue);&#xD;&#xA;+                }&#xD;&#xA;+&#xD;&#xA;+                Dedent();&#xD;&#xA;+&#xD;&#xA;+                Append(&quot;&lt;/type&gt;&quot;);&#xD;&#xA;+            }&#xD;&#xA;+	    }&#xD;&#xA;+&#xD;&#xA;+	    private void EndWriteProperty()&#xD;&#xA; 		{&#xD;&#xA; 			Append(&quot;&lt;/property&gt;&quot;);&#xD;&#xA; 		}&#xD;&#xA;@@ -1283,12 +1314,12 @@&#xD;&#xA; 			        WriteIfNonNull(&quot;default&quot;, @default));&#xD;&#xA; 		}&#xD;&#xA; &#xD;&#xA;-		private void BeginWriteProperty(string accessString, string columnType, string formula, bool insert, string name, Type propType, bool update)&#xD;&#xA;+		private void BeginWriteProperty(string accessString, string columnType, string formula, bool insert, string name, Type propType, bool update, string @params)&#xD;&#xA; 		{&#xD;&#xA; 			AppendF(&quot;&lt;property{0}{1}{2}{3}{4}{5}&gt;&quot;,&#xD;&#xA; 			        MakeAtt(&quot;name&quot;, name),&#xD;&#xA; 					WriteIfNonNull(&quot;access&quot;, accessString),&#xD;&#xA;-			        MakeTypeAtt(propType, columnType),&#xD;&#xA;+                    @params == null? MakeTypeAtt(&quot;type&quot;, propType, columnType) : string.Empty,&#xD;&#xA; 			        WriteIfFalse(&quot;insert&quot;, insert),&#xD;&#xA; 			        WriteIfFalse(&quot;update&quot;, update),&#xD;&#xA; 			        WriteIfNonNull(&quot;formula&quot;, formula));&#xD;&#xA;{quote}&#xD;&#xA;to:&#xD;&#xA;{quote}&#xD;&#xA;I have implemented this &quot;missing&quot; functionality and attached a candidate patch.&#xD;&#xA;{quote}&#xD;&#xA;" created="1265497200000" />
    <comment author="jonorossi" text="ActiveRecord is not actively maintained, closing this issue as won't fix because of its age. Feel free to relog a new issue on GitHub:&#xA;https://github.com/castleproject/ActiveRecord/issues" created="1414999631822" />
  </issue>
</issues>