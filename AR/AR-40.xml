<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Feature</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>Framework</value>
    </field>
    <field name="Fix versions" />
    <field name="Affected versions" />
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>40</value>
    </field>
    <field name="summary">
      <value>Type hirerarchy with abstract base classes</value>
    </field>
    <field name="description">
      <value>Consider Midas suggestion. Quoting him

"try to modify method ShouldCheckBase in ActiveRecordModelBuilder.cs

       private static bool ShouldCheckBase(Type type)
       {
                       bool checkBase = type.BaseType != typeof(object) &amp;&amp;
                               type.BaseType != typeof(ActiveRecordBase) &amp;&amp;
                               type.BaseType != typeof(ActiveRecordValidationBase);
                       if (checkBase)
                       {
                               Type basetype = type.BaseType;
                               while(basetype != typeof(object))
                               {
                                       if (basetype.IsDefined( typeof(JoinedBaseAttribute), false) )
                                               return false;

                                       object[] attrs = basetype.GetCustomAttributes(
typeof(ActiveRecordAttribute), false );
                                       if (attrs.Length &gt; 0)
                                       {
                                               ActiveRecordAttribute arAttribute = attrs[0] as ActiveRecordAttribute;
                                               if (arAttribute.DiscriminatorColumn != null)
                                                       return false;
                                       }
                                       else return true;
                                       basetype = basetype.BaseType;
                               }
                       }
                       return checkBase;
               }"</value>
    </field>
    <field name="created">
      <value>1143546989000</value>
    </field>
    <field name="updated">
      <value>1162410874000</value>
    </field>
    <field name="reporterName">
      <value>hammett</value>
    </field>
    <field name="updaterName">
      <value>hammett</value>
    </field>
    <field name="resolved">
      <value>1282135932932</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
  </issue>
</issues>