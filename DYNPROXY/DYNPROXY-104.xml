<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Feature</value>
    </field>
    <field name="State">
      <value>Won't fix</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions">
      <value>2.2</value>
    </field>
    <field name="Affected versions">
      <value>2.1 RTM</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>104</value>
    </field>
    <field name="summary">
      <value>Improve caching of interface proxy with target types</value>
    </field>
    <field name="description">
      <value>Currently for each type of target, DP generates new type of proxy.
In most  cases it is redundant, since all these types are pretty much the same.

This is to cover one case: when target type implements also some of additional interfaces we proxy, calls to these interfaces are forwarded to the target object.

However, given most of the time types implement just one interface, this is being to cautious.

Instead caching per proxy target interface + target type
we might cache per all interfaces implemented by target.

We could also improve this even further at the expense of single runtime null-check and cache always per target interface/additional interfaces regardless of the type of the target object, and then do two things:
1. For every method of additional interfaces pass as invocation target proxy target as IFoo, where IFoo is the interface owning the member being called.
2. In InvokeMethodOnTarget check if target is null
   - if so - throw new NotImplementedException("This is a DynamicProxy2 error: the interceptor attempted to 'Proceed' for a method without a target, for example, an interface method or an abstract method");
   - else - invoke the method on target object.

This would not change the current behavior and would decouple proxy type from target type. This way we broaden the scope of reuse, without breaking exisitng scenarios.</value>
    </field>
    <field name="created">
      <value>1246861256000</value>
    </field>
    <field name="updated">
      <value>1258119370000</value>
    </field>
    <field name="reporterName">
      <value>xtoff</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1258118280000</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="xtoff" text="I think we're better leaving it as it is, and educating people that they can reap benefits of improved caching by using InterfaceProxiesWithTargetInterface instead" created="1258118285000" />
    <comment author="xtoff" text="* '''Description''' changed from:&#xD;&#xA;{quote}&#xD;&#xA;Currently for each type of target, DP generates new type of proxy.&#xD;&#xA;In most  cases it is redundant, since all these types are pretty much the same.&#xD;&#xA;&#xD;&#xA;This is to cover one case: when target type implements also some of additional interfaces we proxy, calls to these interfaces are forwarded to the target object.&#xD;&#xA;&#xD;&#xA;However, given most of the time types implement just one interface, this is being to cautious.&#xD;&#xA;&#xD;&#xA;Instead caching per proxy target interface + target type&#xD;&#xA;we might cache per all interfaces implemented by target.&#xD;&#xA;&#xD;&#xA;This way we broaden the scope of reuse, without breaking exisitng scenarios.&#xD;&#xA;{quote}&#xD;&#xA;to:&#xD;&#xA;{quote}&#xD;&#xA;Currently for each type of target, DP generates new type of proxy.&#xD;&#xA;In most  cases it is redundant, since all these types are pretty much the same.&#xD;&#xA;&#xD;&#xA;This is to cover one case: when target type implements also some of additional interfaces we proxy, calls to these interfaces are forwarded to the target object.&#xD;&#xA;&#xD;&#xA;However, given most of the time types implement just one interface, this is being to cautious.&#xD;&#xA;&#xD;&#xA;Instead caching per proxy target interface + target type&#xD;&#xA;we might cache per all interfaces implemented by target.&#xD;&#xA;&#xD;&#xA;We could also improve this even further at the expense of single runtime null-check and cache always per target interface/additional interfaces regardless of the type of the target object, and then do two things:&#xD;&#xA;1. For every method of additional interfaces pass as invocation target proxy target as IFoo, where IFoo is the interface owning the member being called.&#xD;&#xA;2. In InvokeMethodOnTarget check if target is null&#xD;&#xA;   - if so - throw new NotImplementedException(&quot;This is a DynamicProxy2 error: the interceptor attempted to 'Proceed' for a method without a target, for example, an interface method or an abstract method&quot;);&#xD;&#xA;   - else - invoke the method on target object.&#xD;&#xA;&#xD;&#xA;This would not change the current behavior and would decouple proxy type from target type. This way we broaden the scope of reuse, without breaking exisitng scenarios.&#xD;&#xA;{quote}&#xD;&#xA;" created="1247200080000" />
    <comment author="xtoff" text="* '''Resolution''' set to ''By Design''.&#xD;&#xA;* '''Version Fixed''' set to ''2.2''.&#xD;&#xA;* '''Status''' changed from ''Open'' to ''Resolved''.&#xD;&#xA;" created="1258118280000" />
    <comment author="xtoff" text="* '''Status''' changed from ''Resolved'' to ''Closed''.&#xD;&#xA;" created="1258119360000" />
  </issue>
</issues>