<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions">
      <value>Future</value>
    </field>
    <field name="Affected versions" />
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>50</value>
    </field>
    <field name="summary">
      <value>BadImageFormatException when proxying abstract class</value>
    </field>
    <field name="description">
      <value>Currently, DynamicProxy2 will proxy abstract classes, but it will generate a bad (unverifiable) image, because the generated 
invocation nested type calls into the abstract base method. If an interceptor calls IInvocation.Proceed, a BadImageFormatException will occur.

IMO, DP2 should continue to proxy abstract classes, but IInvocation.Proceed should either throw an exception or do nothing. 

Code point (I think): ClassProxyGenerator.GenerateCode, where the callback methods are generated (lines 148-155). If one wanted to implement the exception throwing behavior suggested above, one _probably_ just needs to set the callback to null if the method is abstract. Then it will be treated like a method for an interface proxy, however I might not see the full picture. </value>
    </field>
    <field name="created">
      <value>1173952745000</value>
    </field>
    <field name="updated">
      <value>1190951720000</value>
    </field>
    <field name="reporterName">
      <value>fcs</value>
    </field>
    <field name="updaterName">
      <value>fcs</value>
    </field>
    <field name="resolved">
      <value>1282140675276</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
  </issue>
</issues>