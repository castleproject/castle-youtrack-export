<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Normal</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions">
      <value>2.5.2</value>
    </field>
    <field name="Affected versions">
      <value>2.2</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>133</value>
    </field>
    <field name="summary">
      <value>Debug assertion in ClassProxyInstanceContributor fails when proxying ISerializable with an explicit implementation of GetObjectData</value>
    </field>
    <field name="description">
      <value>The following C# code reliably generates a debug assertion for me using 2.2.0.6628 / .Net 3.5:
{code lang=java}
[Serializable]
public class Foo : ISerializable
{
    void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

new ProxyGenerator().CreateClassProxy(typeof(Foo), new IInterceptor[] {});
{code}
The assertion stack is:
 	
==================================
Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.VerifyIfBaseImplementsGetObjectData(System.Type baseType = {Name = "WebRequest" FullName = "System.Net.WebRequest"}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0) + 0x1b2 bytes	
 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.ClassProxyInstanceContributor(System.Type targetType = {Name = "WebRequest" FullName = "System.Net.WebRequest"}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0, System.Type[] interfaces = null) + 0xf0 bytes	
 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GetTypeImplementerMapping(System.Type[] interfaces = null, out System.Collections.Generic.IEnumerable&lt;Castle.DynamicProxy.Contributors.ITypeContributor&gt; contributors = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0x13a bytes	
 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateType(string name = "Castle.Proxies.WebRequestProxy", System.Type[] interfaces = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0xc9 bytes	
 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(System.Type[] interfaces = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x696 bytes	
 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(System.Type classToProxy = {Name = "WebRequest" FullName = "System.Net.WebRequest"}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0xe5 bytes	
 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(System.Type classToProxy = {Name = "WebRequest" FullName = "System.Net.WebRequest"}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x7d bytes	
 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = "WebRequest" FullName = "System.Net.WebRequest"}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}, object[] constructorArguments = null, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x217 bytes	
 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = "WebRequest" FullName = "System.Net.WebRequest"}, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x64 bytes	
====================================

Looking at the source, the assertion is comparing the method name to "GetObjectData", but for Foo, the method name returned from GetInterfaceMap() is "System.Runtime.Serialization.ISerializable.GetObjectData":

typeof (Foo).GetInterfaceMap(typeof (ISerializable)).TargetMethods[0].Name

We're using DynamicProxy (via Moq) in our unit tests, so constantly clicking away the debug assertion is pretty painful.
</value>
    </field>
    <field name="created">
      <value>1274298489000</value>
    </field>
    <field name="updated">
      <value>1288181622556</value>
    </field>
    <field name="reporterName">
      <value>jaroy</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1288179294993</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-18[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
    <comment author="jaroy" text="I reproduced this more simply.  It appears to assert anytime you proxy a class which implements ISerializable and implements its interface method explicitly:&#xA;&#xA;[Serializable]&#xA;public class Foo : ISerializable&#xA;{&#xA;    void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)&#xA;    {&#xA;    }&#xA;}&#xA;&#xA;This will then raise the assertion:&#xA;&#xA;new ProxyGenerator().CreateClassProxy(typeof (Foo), new IInterceptor[] {});" created="1274299039000" />
    <comment author="jaroy" text="Updated the description to show the from-scratch repro.  Ignore previous comment." created="1274299223000" />
    <comment author="jaroy" text="BTW, for anyone with a similar issue, our workaround is to turn off UI mode for debug assertions and then turn it back on:&#xA;&#xA;foreach (TraceListener l in Trace.Listeners)&#xA;{&#xA;    if (l is DefaultTraceListener &amp;&amp; ((DefaultTraceListener)l).AssertUiEnabled)&#xA;    {&#xA;        ((DefaultTraceListener)l).AssertUiEnabled = false;&#xA;    }&#xA;}&#xA;&#xA;// construct proxies &#xA;&#xA;// set AssertUiEnabled back to true on any listeners that we disabled it on above&#xA;" created="1274299385000" />
    <comment author="jaroy" text="* '''Description''' changed from:&#xD;&#xA;{quote}&#xD;&#xA;The following C# code reliably generates a debug assertion for me using 2.2.0.6628:&#xD;&#xA;&#xD;&#xA;new ProxyGenerator().CreateClassProxy(&#xD;&#xA;    typeof (System.Net.WebRequest), &#xD;&#xA;    new IInterceptor[] {});&#xD;&#xA;&#xD;&#xA;The assertion stack is:&#xD;&#xA; 	&#xD;&#xA;==================================&#xD;&#xA;Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.VerifyIfBaseImplementsGetObjectData(System.Type baseType = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0) + 0x1b2 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.ClassProxyInstanceContributor(System.Type targetType = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0, System.Type[] interfaces = null) + 0xf0 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GetTypeImplementerMapping(System.Type[] interfaces = null, out System.Collections.Generic.IEnumerable&lt;Castle.DynamicProxy.Contributors.ITypeContributor&gt; contributors = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0x13a bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateType(string name = &quot;Castle.Proxies.WebRequestProxy&quot;, System.Type[] interfaces = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0xc9 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(System.Type[] interfaces = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x696 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0xe5 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x7d bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}, object[] constructorArguments = null, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x217 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x64 bytes	&#xD;&#xA;====================================&#xD;&#xA;&#xD;&#xA;Looking at the source, the assertion is comparing the method name to &quot;GetObjectData&quot;, but for System.Net.WebRequest, the method name returned from GetInterfaceMap() is &quot;System.Runtime.Serialization.ISerializable.GetObjectData&quot;:&#xD;&#xA;&#xD;&#xA;typeof (System.Net.WebRequest).GetInterfaceMap(typeof (ISerializable)).TargetMethods[0].Name&#xD;&#xA;&#xD;&#xA;I don't know what is special about WebRequest that causes this and have been unsuccessful in reproducing it with my own class definition.  The same problem occurs with System.Net.WebResponse.&#xD;&#xA;&#xD;&#xA;We're using DynamicProxy (via Moq) in our unit tests, so constantly clicking away the debug assertion is pretty painful.&#xD;&#xA;{quote}&#xD;&#xA;to:&#xD;&#xA;{quote}&#xD;&#xA;The following C# code reliably generates a debug assertion for me using 2.2.0.6628:&#xD;&#xA;&#xD;&#xA;new ProxyGenerator().CreateClassProxy(typeof (System.Net.WebRequest), new IInterceptor[] {});&#xD;&#xA;&#xD;&#xA;The assertion stack is:&#xD;&#xA; 	&#xD;&#xA;==================================&#xD;&#xA;Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.VerifyIfBaseImplementsGetObjectData(System.Type baseType = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0) + 0x1b2 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.ClassProxyInstanceContributor(System.Type targetType = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0, System.Type[] interfaces = null) + 0xf0 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GetTypeImplementerMapping(System.Type[] interfaces = null, out System.Collections.Generic.IEnumerable&lt;Castle.DynamicProxy.Contributors.ITypeContributor&gt; contributors = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0x13a bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateType(string name = &quot;Castle.Proxies.WebRequestProxy&quot;, System.Type[] interfaces = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0xc9 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(System.Type[] interfaces = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x696 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0xe5 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x7d bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}, object[] constructorArguments = null, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x217 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x64 bytes	&#xD;&#xA;====================================&#xD;&#xA;&#xD;&#xA;Looking at the source, the assertion is comparing the method name to &quot;GetObjectData&quot;, but for System.Net.WebRequest, the method name returned from GetInterfaceMap() is &quot;System.Runtime.Serialization.ISerializable.GetObjectData&quot;:&#xD;&#xA;&#xD;&#xA;typeof (System.Net.WebRequest).GetInterfaceMap(typeof (ISerializable)).TargetMethods[0].Name&#xD;&#xA;&#xD;&#xA;I don't know what is special about WebRequest that causes this and have been unsuccessful in reproducing it with my own class definition.  The same problem occurs with System.Net.WebResponse.&#xD;&#xA;&#xD;&#xA;We're using DynamicProxy (via Moq) in our unit tests, so constantly clicking away the debug assertion is pretty painful.&#xD;&#xA;{quote}&#xD;&#xA;" created="1274298489001" />
    <comment author="jaroy" text="* '''Summary''' changed from ''Debug assertion in ClassProxyInstanceContributor fails when proxying System.Net.WebRequest, System.Net.WebResponse'' to ''Debug assertion in ClassProxyInstanceContributor fails when proxying ISerializable with an explicit implementation of GetObjectData''.&#xD;&#xA;* '''Description''' changed from:&#xD;&#xA;{quote}&#xD;&#xA;The following C# code reliably generates a debug assertion for me using 2.2.0.6628:&#xD;&#xA;&#xD;&#xA;new ProxyGenerator().CreateClassProxy(typeof (System.Net.WebRequest), new IInterceptor[] {});&#xD;&#xA;&#xD;&#xA;The assertion stack is:&#xD;&#xA; 	&#xD;&#xA;==================================&#xD;&#xA;Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.VerifyIfBaseImplementsGetObjectData(System.Type baseType = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0) + 0x1b2 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.ClassProxyInstanceContributor(System.Type targetType = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0, System.Type[] interfaces = null) + 0xf0 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GetTypeImplementerMapping(System.Type[] interfaces = null, out System.Collections.Generic.IEnumerable&lt;Castle.DynamicProxy.Contributors.ITypeContributor&gt; contributors = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0x13a bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateType(string name = &quot;Castle.Proxies.WebRequestProxy&quot;, System.Type[] interfaces = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0xc9 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(System.Type[] interfaces = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x696 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0xe5 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x7d bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}, object[] constructorArguments = null, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x217 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x64 bytes	&#xD;&#xA;====================================&#xD;&#xA;&#xD;&#xA;Looking at the source, the assertion is comparing the method name to &quot;GetObjectData&quot;, but for System.Net.WebRequest, the method name returned from GetInterfaceMap() is &quot;System.Runtime.Serialization.ISerializable.GetObjectData&quot;:&#xD;&#xA;&#xD;&#xA;typeof (System.Net.WebRequest).GetInterfaceMap(typeof (ISerializable)).TargetMethods[0].Name&#xD;&#xA;&#xD;&#xA;I don't know what is special about WebRequest that causes this and have been unsuccessful in reproducing it with my own class definition.  The same problem occurs with System.Net.WebResponse.&#xD;&#xA;&#xD;&#xA;We're using DynamicProxy (via Moq) in our unit tests, so constantly clicking away the debug assertion is pretty painful.&#xD;&#xA;{quote}&#xD;&#xA;to:&#xD;&#xA;{quote}&#xD;&#xA;The following C# code reliably generates a debug assertion for me using 2.2.0.6628 / .Net 3.5:&#xD;&#xA;&#xD;&#xA;[Serializable]&#xD;&#xA;public class Foo : ISerializable&#xD;&#xA;{&#xD;&#xA;    void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;new ProxyGenerator().CreateClassProxy(typeof(Foo), new IInterceptor[] {});&#xD;&#xA;&#xD;&#xA;The assertion stack is:&#xD;&#xA; 	&#xD;&#xA;==================================&#xD;&#xA;Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.VerifyIfBaseImplementsGetObjectData(System.Type baseType = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0) + 0x1b2 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Contributors.ClassProxyInstanceContributor.ClassProxyInstanceContributor(System.Type targetType = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Collections.Generic.IList&lt;System.Reflection.MethodInfo&gt; methodsToSkip = Count = 0, System.Type[] interfaces = null) + 0xf0 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GetTypeImplementerMapping(System.Type[] interfaces = null, out System.Collections.Generic.IEnumerable&lt;Castle.DynamicProxy.Contributors.ITypeContributor&gt; contributors = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0x13a bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateType(string name = &quot;Castle.Proxies.WebRequestProxy&quot;, System.Type[] interfaces = null, Castle.DynamicProxy.Generators.INamingScope namingScope = {Castle.DynamicProxy.Generators.NamingScope}) + 0xc9 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(System.Type[] interfaces = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x696 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0xe5 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}) + 0x7d bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, System.Type[] additionalInterfacesToProxy = null, Castle.DynamicProxy.ProxyGenerationOptions options = {Castle.DynamicProxy.ProxyGenerationOptions}, object[] constructorArguments = null, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x217 bytes	&#xD;&#xA; 	Castle.DynamicProxy2.dll!Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type classToProxy = {Name = &quot;WebRequest&quot; FullName = &quot;System.Net.WebRequest&quot;}, Castle.Core.Interceptor.IInterceptor[] interceptors = {Castle.Core.Interceptor.IInterceptor[0]}) + 0x64 bytes	&#xD;&#xA;====================================&#xD;&#xA;&#xD;&#xA;Looking at the source, the assertion is comparing the method name to &quot;GetObjectData&quot;, but for Foo, the method name returned from GetInterfaceMap() is &quot;System.Runtime.Serialization.ISerializable.GetObjectData&quot;:&#xD;&#xA;&#xD;&#xA;typeof (Foo).GetInterfaceMap(typeof (ISerializable)).TargetMethods[0].Name&#xD;&#xA;&#xD;&#xA;We're using DynamicProxy (via Moq) in our unit tests, so constantly clicking away the debug assertion is pretty painful.&#xD;&#xA;{quote}&#xD;&#xA;" created="1274299140000" />
  </issue>
</issues>