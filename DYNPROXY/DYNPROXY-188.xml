<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>No subsystem</value>
    </field>
    <field name="Fix versions">
      <value>3.2.1</value>
    </field>
    <field name="Affected versions">
      <value>3.2</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>188</value>
    </field>
    <field name="summary">
      <value>CreateInterfaceProxyWithoutTarget fails with interface containing member with 'ref UIntPtr'</value>
    </field>
    <field name="description">
      <value>The following interface results in an ArgumentException.
public interface IFoo
{
  int GetBar(ref UIntPtr parameter);
}

Using Moq to create a proxy:
Mock&lt;IFoo&gt; mockFoo = new Mock&lt;IFoo&gt;();
IFoo foo = mockFoo.Object;

Results in the following ArgumentException and stack trace:
Type System.UIntPtr could not be converted to a OpCode

   at Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadIndirectOpCodeForType(ILGenerator gen, Type type)
   at Castle.DynamicProxy.Generators.Emitters.SimpleAST.IndirectReference.LoadReference(ILGenerator gen)
   at Castle.DynamicProxy.Generators.Emitters.ArgumentsUtil.EmitLoadOwnerAndReference(Reference reference, ILGenerator il)
   at Castle.DynamicProxy.Generators.Emitters.SimpleAST.ReferencesToObjectArrayExpression.Emit(IMemberEmitter member, ILGenerator gen)
   at Castle.DynamicProxy.Generators.Emitters.SimpleAST.NewInstanceExpression.Emit(IMemberEmitter member, ILGenerator gen)
   at Castle.DynamicProxy.Generators.Emitters.SimpleAST.AssignStatement.Emit(IMemberEmitter member, ILGenerator gen)
   at Castle.DynamicProxy.Generators.Emitters.CodeBuilders.AbstractCodeBuilder.Generate(IMemberEmitter member, ILGenerator il)
   at Castle.DynamicProxy.Generators.Emitters.MethodEmitter.Generate()
   at Castle.DynamicProxy.Generators.Emitters.AbstractTypeEmitter.EnsureBuildersAreInAValidState()
   at Castle.DynamicProxy.Generators.Emitters.AbstractTypeEmitter.BuildType()
   at Castle.DynamicProxy.Generators.InterfaceProxyWithoutTargetGenerator.GenerateType(String typeName, Type proxyTargetType, Type[] interfaces, INamingScope namingScope)
   at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
   at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type interfaceToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)
   at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type interfaceToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)
   at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type interfaceToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options, IInterceptor[] interceptors)
   at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type interfaceToProxy, Type[] additionalInterfacesToProxy, IInterceptor[] interceptors)
   at Moq.Proxy.CastleProxyFactory.CreateProxy[T](ICallInterceptor interceptor, Type[] interfaces, Object[] arguments)
   at Moq.Mock`1.&lt;InitializeInstance&gt;b__0()
   at Moq.PexProtector.Invoke(Action action)
   at Moq.Mock`1.InitializeInstance()
   at Moq.Mock`1.OnGetObject()
   at Moq.Mock.GetObject()
   at Moq.Mock.get_Object()
   at Moq.Mock`1.get_Object()


This might be related to DYNPROXY-74. It also fails using the 'out' keyword.

</value>
    </field>
    <field name="created">
      <value>1365531118372</value>
    </field>
    <field name="updated">
      <value>1379119564266</value>
    </field>
    <field name="reporterName">
      <value>Pjanssen</value>
    </field>
    <field name="updaterName">
      <value>xtoff</value>
    </field>
    <field name="resolved">
      <value>1371793483249</value>
    </field>
    <field name="watcherName">
      <value>User: id = 20-942[up-to-date]</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
  </issue>
</issues>