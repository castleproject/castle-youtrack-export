<?xml version="1.0" encoding="utf-8"?>
<issues>
  <issue>
    <field name="Priority">
      <value>Major</value>
    </field>
    <field name="Type">
      <value>Bug</value>
    </field>
    <field name="State">
      <value>Fixed</value>
    </field>
    <field name="Assignee" />
    <field name="Subsystem">
      <value>ViewEngine - Brail</value>
    </field>
    <field name="Fix versions">
      <value>Future</value>
    </field>
    <field name="Affected versions">
      <value>Release Candidate 3</value>
    </field>
    <field name="Fixed in build" />
    <field name="numberInProject">
      <value>404</value>
    </field>
    <field name="summary">
      <value>Usage of IgnoreNull adversly affects helpers and view components.</value>
    </field>
    <field name="description">
      <value>When using IgnoreNull in a view eg

${Helper.Method(?somObject.Property)}

or a view component

component MyComponent, {"Collection":?someList}

Brail will always return an instance of IgnoreNull

This breaks code like this

if(ComponentParams["Collection"]  is IEnumerable)

or helper methods like this

public string MaskCardNumber(CreditCard card)

because the underlying C# code usually knows nothing about IgnoreNull or IQuackFu

See relevant thread http://groups.google.com/group/castle-project-devel/browse_frm/thread/25d57731ee74465c/330857264f29d43a#330857264f29d43a</value>
    </field>
    <field name="created">
      <value>1201173888000</value>
    </field>
    <field name="updated">
      <value>1201188660000</value>
    </field>
    <field name="reporterName">
      <value>chriso</value>
    </field>
    <field name="updaterName">
      <value>chriso</value>
    </field>
    <field name="resolved">
      <value>1282145523885</value>
    </field>
    <field name="permittedGroup">
      <value>All Users</value>
    </field>
  </issue>
</issues>